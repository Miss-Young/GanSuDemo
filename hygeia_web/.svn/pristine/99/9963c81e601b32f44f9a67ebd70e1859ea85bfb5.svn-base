<?xml version="1.0" encoding="UTF-8"?>
<sqls xmlns="http://www.powersi.com.cn/schema/sqls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.powersi.com.cn/schema/sqls ../sqls.xsd">
<!-- sql begin -->
<sql id="paramMap" desc="param函数动态获取map类型参数" data-source="dataSource">
<![CDATA[
select *
  from sys_code_table
 where 1 = 1
--for(entry in param()){
   and #text(entry.key)# = #entry.value#
--}
--for(key in getBeanProps(param())){
   and #text(strutil.toUpperCase(key))# = #param(key)#
--}
]]>
</sql>

<sql id="paramBean" desc="param函数动态获取bean类型参数">
<![CDATA[
select *
  from sys_menu
 where 1 = 1
--//遍历bean属性列表
--for(prop in getBeanProps(param())) {
--	var val = param(prop);					//动态获取参数值
--	if(isNotEmpty(val)) {					//判断参数值是否为空
--		var col = getColName(prop);			//获取属性名对应的数据库字段名
--		if(hasColumn("sys_menu", col)){		//判断字段名是否存在
   and #text(col)# = #val#
--		}
--	}
--}
   and instr('测试中文', '中文') > 0
]]>
</sql>

<sql id="cols" desc="定义列名集合">
<![CDATA[
code_type, code_name, code_sql
]]>
</sql>

<sql id="condition" desc="定义条件集合">
<![CDATA[
--for(col in getTableCols("sys_code_table")){
--if(isNotEmpty(param(col))){
   and #text(col)# like #db.like(param(col))#
--}
--}
]]>
</sql>

<sql id="dbUse" desc="db.use函数调用其它模板">
<![CDATA[
select #db.use("cols")# 
  from sys_code_table 
 where 1 = 1
--db.use("sample.demo.condition");
]]>
</sql>

<sql id="dbLike" desc="db.like函数输出like参数" remark="列举了各种like写法">
<![CDATA[
select t.*, '测试' as test_col
  from sys_user t
 where 1 = 1
--if(isNotEmpty(user_name)){
   and t.user_name like #db.like(user_name)#
   and t.user_name like # '%' + user_name + '%'#
   and t.user_name like '%#text(user_name)#%'
--//and t.user_name like #db.like(user_name, 1)#
--/*and t.user_name like #db.like(user_name, 2)#*/
--}
]]>
</sql>

<sql id="dbJoin" desc="db.join函数输出in参数">
<![CDATA[
select *
  from sys_user
 where 1 = 1
--if(isNotEmpty(user_name)){
   and user_name in (#db.join(user_name)#)
--}
--if(isNotEmpty(valid_flag)){
   and valid_flag in (#db.join(valid_flag)#)
   and valid_flag in (#db.join(valid_flag, 1)#)
--}
--if(isNotEmpty(login_date)){
   and login_date in (#db.join(login_date, 2)#)
   and login_date in (#db.join(login_date, 3)#)
--}
]]>
</sql>

<sql id="dbNumber" desc="db.number函数输出数字参数">
<![CDATA[
select *
  from sys_user
 where 1 = 1
--if(isNotEmpty(money)){
   and money >= #db.number(money)#
   and money >= #db.number(money, 0)#
   and money >= #db.number(money, 4, 4)#
--}
--if(isNotEmpty(time)){
   and time >= #db.number(time)#
   and time >= #db.number(time, 0)#
--}
]]>
</sql>

<sql id="dbDate" desc="db.date函数输出日期参数，不带时分秒">
<![CDATA[
select *
  from sys_user
 where 1 = 1
--if(isNotEmpty(begin_date)){
   and begin_date >= #db.date(begin_date)#
   and begin_date >= #db.date(begin_date, "yyyy-MM-dd")#
--}
--if(isNotEmpty(end_date)){
   and end_date <= #db.date(end_date)#
   and end_date <= #db.date(end_date, "yyyy/MM/dd")#
--}
]]>
</sql>

<sql id="dbTimestamp" desc="db.timestamp函数输出时间戳参数，带时分秒">
<![CDATA[
select *
  from sys_user
 where 1 = 1
--if(isNotEmpty(begin_date)){
   and begin_date >= #db.timestamp(begin_date)#
   and begin_date >= #db.timestamp(begin_date, "yyyy-MM-dd HH:mm:ss")#
--}
--if(isNotEmpty(end_date)){
   and end_date <= #db.timestamp(end_date)#
   and end_date <= #db.timestamp(end_date, "yyyy/MM/dd HH:mm:ss")#
--}
]]>
</sql>

<sql id="dbAdds" desc="db.adds函数根据参数值是否为空，自动添加sql条件">
<![CDATA[
select ss.*
  from sys_staff ss
where 1 = 1
--db.addStringExp(login_user, "ss.login_user");
--db.addString(user_name, "ss.user_name", "like");
--db.addInt(user_id, "ss.staff_id", "=");
--db.addFloat(qq, "ss.qq", "<>");
--db.addDate(last_date, "ss.last_date", ">=");
--db.addDatetime(birth_date, "ss.birthdate", "<=");
--db.addIntValues(grade_list, "ss.grade_id", "not in");
--db.addStringValues(sex, "ss.sex");
--db.addStringValues(sex, "ss.sex");
]]>
</sql>

<sql id="getUserInfo" desc="getUserInfo函数获取当前用户信息">
<![CDATA[
select *
  from sys_staff
 where 1 = 1
   and login_user = #getUserInfo() [ "login_user" ]#
   and staff_id = #db.number(getUserInfo("user_id"))#
   and center_id in (#db.join(getUserInfo("center_id", "0"))#)
   and dept_id in (#db.join(getUserInfo("dept_up_id", "-1"), 1)#)
   and super_user = #getUserInfo("super_user")#
]]>
</sql>

<sql id="showError" desc="演示错误输出" remark="请从出错行号向前查看错误，可能是前面几行错误导致的">
<![CDATA[
select *
  from sys_staff
 where 1 = 1
   and login_user = #not_var#
]]>
</sql>

<!-- sql end -->
</sqls>